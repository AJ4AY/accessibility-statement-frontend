# Copyright 2021 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

environment: local

local {
  services {
    host: "http://localhost"
    accessibility-statement-frontend {
      port = 12346
      productionRoute = "/accessibility-statement"
    }
  }
}

service-manager {
  services {
    host: "http://localhost"
    accessibility-statement-frontend {
      port = 12346
      productionRoute = "/accessibility-statement"
    }
  }
}

dev {
  services {
    host: "https://www.development.tax.service.gov.uk"
    accessibility-statement-frontend {
      port = 443
      productionRoute = "/accessibility-statement"
    }
  }
}

# Below properties are used to configure Zap Api.
# Refer to https://github.com/hmrc/zap-automation/blob/master/src/main/resources/reference.conf for all configurable
# properties
zap-automation-config {
  activeScan = true

  # Required field. This is the seed url for the spider scan. It needs to be the URL of the start page of
  # your application (not just localhost:port).
  testUrl = "http://localhost:"${local.services.accessibility-statement-frontend.port}"/accessibility-statement/example-partially-compliant"

  # A context is a construct in Zap that limits the scope of any attacks run to a particular domain
  # This would usually be the base url of your service - eg http://localhost:xxxx.*
  contextBaseUrlRegex = "http://localhost:"${local.services.accessibility-statement-frontend.port}".*"

  #These are the urls that the zap-automation library will use to filter out the alerts that are shown to you.
  alertUrlsToReport = [
    "http://localhost:"${local.services.accessibility-statement-frontend.port}
  ]

  alertsToIgnore = [
    # PLAY_LANG is a known non-HttpOnly cookie, it needs to be available client-side
    {cweid: "16", url: "http://localhost:"${local.services.accessibility-statement-frontend.port}"/.+"}
  ]

  # Fails test only if the reported alert's severity is above or same as the provided failureThreshold.
  # Example:
  # failureThreshold = "Medium" will not fail the test if the report has only Low and Informational alerts.
  # Test will fail if there are any Medium or High Alerts
  # Accepted Values: High, Medium, Low
  failureThreshold="Low"
}

metrics.enabled = false
auditing.enabled = false
